version: 2.1

orbs:
  slack: circleci/slack@4.4.2

defaults: &default
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackname:
        type: string
        default: "frontend"   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.stackname >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.stackname >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

  build-target:
    description: Build the environment.
    parameters:
      module:
        type: string
        default: "frontend"
      target:
        type: string
        default: "build"
    steps:
      - checkout
      - restore_cache:
          keys: [<< parameters.module >>-build]
      - run:
          command: |
            cd << parameters.module >>
            npm i
            npm << parameters.target >>
      - save_cache:
          paths: [<< parameters.module >>/node_modules]
          key: << parameters.module >>-build

jobs:
  build-frontend:
    <<: *default
    steps:
      - build-target:
          module: "frontend"
          target: "run build"

  build-backend:
    <<: *default
    steps:
      - build-target:
          module: "backend"
          target: "run build"

  test-frontend:
    <<: *default
    steps:
      - build-target:
          module: "frontend"
          target: "run test"
                
  test-backend:
    <<: *default
    steps:
      - build-target:
          module: "backend"
          target: "run test"

  scan-frontend:
    <<: *default
    steps:
      - build-target:
          module: "frontend"
          target: "audit --audit-level=critical"

  scan-backend:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=AB_UDACITY_PROJECT3_BACKEND \
              --stack-name "backend-udapeople-ab1j287dhjppmz437" \
              --parameter-overrides ID="ab1j287dhjppmz437"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=AB_UDACITY_PROJECT3_FRONTEND \
              --stack-name "frontend-udapeople-ab1j287dhjppmz437" \
              --parameter-overrides ID="ab1j287dhjppmz437"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=AB_UDACITY_PROJECT3_BACKEND" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          stackname: udapeople-ab1j287dhjppmz437

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7b:f6:63:89:5a:98:02:a6:4d:aa:f9:30:a5:da:64:36"] 
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 
            cd 
            cd backend
            cat .env
      - destroy-environment:
          stackname: udapeople-ab1j287dhjppmz437


  run-migrations:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            ls -ltr
            cat .env
            npm run migrations > migration_status.txt
            cat migration_status.txt
            echo "*************"
      - run:
          name: Send migration results to memstash
          command: |
            exit 1
      - run:
          when: on_fail
          command: |
            npm run migrations:revert
      - destroy-environment:
          stackname: udapeople-ab1j287dhjppmz437    
 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend:
          context: ABProject3
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only: main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]

